name: DOSP Agent Autoposter

on:
  schedule:
    # Läuft 2x täglich um 09:00 & 15:00 UTC
    - cron: "0 9,15 * * *"
  # Manuell startbar im Actions-Tab
  workflow_dispatch: {}

jobs:
  post:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci || npm i

      # --- Mini-Diagnose: Auth direkt gegen X prüfen ---
      - name: Verify X auth (who am I?)
        run: |
          node - <<'NODE'
          const { TwitterApi } = require('twitter-api-v2');
          const client = new TwitterApi({
            appKey: process.env.X_API_KEY,
            appSecret: process.env.X_API_SECRET,
            accessToken: process.env.ACCESS_TOKEN,
            accessSecret: process.env.ACCESS_SECRET,
          });
          (async () => {
            try {
              const me = await client.v2.me();
              console.log('Auth OK as', me.data.username, me.data.id);
            } catch (e) {
              console.error('Auth failed:', e.data || e);
              process.exit(1);
            }
          })();
          NODE
        env:
          X_API_KEY:     ${{ secrets.X_API_KEY }}
          X_API_SECRET:  ${{ secrets.X_API_SECRET }}
          ACCESS_TOKEN:  ${{ secrets.ACCESS_TOKEN }}
          ACCESS_SECRET: ${{ secrets.ACCESS_SECRET }}

      # --- Optional: Längen der Secrets (maskiert) loggen ---
      - name: Check env lengths (masked)
        run: |
          node -e "const s=n=>(process.env[n]||'').length; console.log({X_API_KEY:s('X_API_KEY'),X_API_SECRET:s('X_API_SECRET'),ACCESS_TOKEN:s('ACCESS_TOKEN'),ACCESS_SECRET:s('ACCESS_SECRET'),QUEUE_CSV:s('QUEUE_CSV'),GAS_WEBHOOK:s('GAS_WEBHOOK')});"
        env:
          X_API_KEY:     ${{ secrets.X_API_KEY }}
          X_API_SECRET:  ${{ secrets.X_API_SECRET }}
          ACCESS_TOKEN:  ${{ secrets.ACCESS_TOKEN }}
          ACCESS_SECRET: ${{ secrets.ACCESS_SECRET }}
          QUEUE_CSV:     ${{ secrets.QUEUE_CSV }}
          GAS_WEBHOOK:   ${{ secrets.GAS_WEBHOOK }}

      # --- Erreichbarkeit der CSV prüfen ---
      - name: Check CSV reachability
        run: |
          echo "HEAD $QUEUE_CSV"
          curl -sSI "$QUEUE_CSV" | head -n 1
        env:
          QUEUE_CSV: ${{ secrets.QUEUE_CSV }}

      # --- GAS Webhook kurz anpingen ---
      - name: Check GAS webhook
        run: |
          echo "GET $GAS_WEBHOOK"
          curl -sS "$GAS_WEBHOOK" || true
          echo
        env:
          GAS_WEBHOOK: ${{ secrets.GAS_WEBHOOK }}

      # --- Eigentlichen Post ausführen ---
      - name: Post from queue
        run: node index.js
        env:
          X_API_KEY:     ${{ secrets.X_API_KEY }}
          X_API_SECRET:  ${{ secrets.X_API_SECRET }}
          ACCESS_TOKEN:  ${{ secrets.ACCESS_TOKEN }}
          ACCESS_SECRET: ${{ secrets.ACCESS_SECRET }}
          QUEUE_CSV:     ${{ secrets.QUEUE_CSV }}
          GAS_WEBHOOK:   ${{ secrets.GAS_WEBHOOK }}
